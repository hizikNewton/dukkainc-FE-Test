{"ast":null,"code":"var _jsxFileName = \"/home/ire/Dev/frontend-engineer-interview/app/src/components/form/FormValidator.tsx\";\nimport React, { Component } from \"react\";\nimport { FormCtx, ValidationCtx } from \"../../context\";\nimport { ValidateData } from \"./validate\";\nimport { Spinner } from \"../spinner\";\nimport localStorage from \"../../utils/localStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class FormValidator extends Component {\n  constructor(props) {\n    super(props);\n    this.context = void 0;\n\n    this.getMessagesForField = field => {\n      return this.state.formSubmitted || this.state.dirty[field] ? this.state.errors[field] || [] : [];\n    };\n\n    this.handleChange = ev => {\n      var _this$props$setErrorS, _this$props;\n\n      let name = ev.target.name;\n      this.setState(state => {\n        state.dirty[name] = true;\n      });\n      (_this$props$setErrorS = (_this$props = this.props).setErrorState) === null || _this$props$setErrorS === void 0 ? void 0 : _this$props$setErrorS.call(_this$props, this.state.errors);\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        formSubmitted: true\n      }, () => {\n        if (this.formValid) {\n          let formErrors = this.props.validateForm(this.props.data);\n\n          if (formErrors.length === 0) {\n            var _localStorage$getItem;\n\n            let empList = (_localStorage$getItem = localStorage.getItem(\"employee\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : [];\n            empList.push(this.props.data);\n            console.log(empList, this.props.data);\n            localStorage.setItem(\"employee\", empList);\n          }\n        }\n      });\n    };\n\n    this.state = {\n      errors: {},\n      dirty: {},\n      formSubmitted: false,\n      formValid: false,\n      getMessagesForField: this.getMessagesForField\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    state.errors = ValidateData(props.data, props.rules);\n\n    if (state.formSubmitted && Object.keys(state.errors).length === 0) {\n      let formErrors = props.validateForm(props.data);\n\n      if (formErrors.length > 0) {\n        state.errors.form = formErrors;\n      }\n    }\n\n    return state;\n  }\n\n  get formValid() {\n    return Object.keys(this.state.errors).length === 0;\n  }\n\n  render() {\n    const {\n      message,\n      loading\n    } = this.context;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ValidationCtx.Provider, {\n        value: this.state,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          onChange: this.handleChange,\n          children: this.props.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.handleClick,\n            disabled: !this.formValid,\n            children: [this.props.submitText, loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nFormValidator.defaultProps = {\n  submitText: \"Submit\"\n};\nFormValidator.contextType = FormCtx;","map":{"version":3,"sources":["/home/ire/Dev/frontend-engineer-interview/app/src/components/form/FormValidator.tsx"],"names":["React","Component","FormCtx","ValidationCtx","ValidateData","Spinner","localStorage","FormValidator","constructor","props","context","getMessagesForField","field","state","formSubmitted","dirty","errors","handleChange","ev","name","target","setState","setErrorState","handleClick","formValid","formErrors","validateForm","data","length","empList","getItem","push","console","log","setItem","getDerivedStateFromProps","rules","Object","keys","form","render","message","loading","children","submitText","defaultProps","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { FormCtx, ValidationCtx } from \"../../context\";\nimport { ValidateData } from \"./validate\";\nimport { Spinner } from \"../spinner\";\nimport { IData, IEmployee, IRule } from \"../../interface\";\nimport localStorage from \"../../utils/localStorage\";\n\ntype errors = Array<string>;\n\ninterface Props {\n  data: any;\n  rules: IRule;\n  validateForm(data: IData): errors;\n  setErrorState?: (error: any) => void;\n  submitText?: string;\n}\ninterface State {\n  errors: {\n    [fields: string]: any;\n  };\n  dirty: {\n    [fields: string]: any;\n  };\n  formSubmitted: boolean;\n  formValid: boolean;\n  getMessagesForField: (field: string) => [];\n}\n\nexport class FormValidator extends Component<Props, State> {\n  static defaultProps = {\n    submitText: \"Submit\",\n  };\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      errors: {},\n      dirty: {},\n      formSubmitted: false,\n      formValid: false,\n      getMessagesForField: this.getMessagesForField,\n    };\n  }\n  static contextType = FormCtx;\n  context!: React.ContextType<typeof FormCtx>;\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    state.errors = ValidateData(props.data, props.rules);\n    if (state.formSubmitted && Object.keys(state.errors).length === 0) {\n      let formErrors = props.validateForm(props.data);\n      if (formErrors.length > 0) {\n        state.errors.form = formErrors;\n      }\n    }\n    return state;\n  }\n  get formValid() {\n    return Object.keys(this.state.errors).length === 0;\n  }\n\n  getMessagesForField = (field: string) => {\n    return this.state.formSubmitted || this.state.dirty[field]\n      ? this.state.errors[field] || []\n      : [];\n  };\n\n  handleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    let name = ev.target.name;\n    this.setState((state) => {\n      state.dirty[name] = true;\n    });\n    this.props.setErrorState?.(this.state.errors);\n  };\n\n  handleClick = () => {\n    this.setState({ formSubmitted: true }, () => {\n      if (this.formValid) {\n        let formErrors = this.props.validateForm(this.props.data);\n        if (formErrors.length === 0) {\n          let empList = localStorage.getItem(\"employee\") ?? [];\n          empList.push(this.props.data);\n          console.log(empList, this.props.data);\n          localStorage.setItem(\"employee\", empList);\n        }\n      }\n    });\n  };\n\n  render() {\n    const { message, loading } = this.context;\n    return (\n      <React.Fragment>\n        <ValidationCtx.Provider value={this.state}>\n          <div onChange={this.handleChange}>{this.props.children}</div>\n\n          <div>\n            <button onClick={this.handleClick} disabled={!this.formValid}>\n              {this.props.submitText}\n              {loading && <Spinner />}\n            </button>\n          </div>\n        </ValidationCtx.Provider>\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}