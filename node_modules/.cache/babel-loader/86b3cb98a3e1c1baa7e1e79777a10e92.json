{"ast":null,"code":"import validator from \"validator\";\nexport function ValidateData(data, rules) {\n  let errors = {};\n  Object.keys(data).forEach(field => {\n    if (rules.hasOwnProperty(field)) {\n      let fielderrors = [];\n      let val = data[field];\n\n      if (rules[field].checked) {\n        if (!val) {\n          fielderrors.push(\"Must be checked\");\n        }\n      } else {\n        if (rules[field].required && validator.isEmpty(val)) {\n          fielderrors.push(\"Value required\");\n        }\n\n        if (!validator.isEmpty(data[field])) {\n          if (rules[field].strAlpha && !validator.matches(val, /^[a-z]([-']?[a-z]+)*( [a-z]([-']?[a-z]+)*)+$/gi)) {\n            fielderrors.push(\"value must be a fullname eg 'John Doe'\");\n          }\n\n          if (rules[field].minlength && !validator.isLength(val, {\n            min: rules[field].minlength\n          })) {\n            fielderrors.push(`Enter at least ${rules[field].minlength}` + \" characters\");\n          }\n\n          if (rules[field].alphanumeric && !validator.isAlphanumeric(val)) {\n            fielderrors.push(\"field can only contain alphanumeric values\");\n          }\n\n          if (rules[field].alpha && !validator.isAlpha(val)) {\n            fielderrors.push(\"Enter only letters\");\n          }\n\n          if (rules[field].email && !validator.isEmail(val)) {\n            fielderrors.push(\"Enter a valid email address\");\n          }\n\n          if (rules[field].password && !validator.isStrongPassword(val)) {\n            fielderrors.push(\"password must be 8 character long \\n must contain at least a special character,1 capital letter and a numeric value \");\n          }\n\n          if (rules[field].equals && !validator.equals(val, data[rules[field].equals])) {\n            fielderrors.push(\"Values don't match\");\n          }\n        }\n      }\n\n      if (fielderrors.length > 0) {\n        errors[field] = fielderrors;\n      }\n    }\n  });\n  return errors;\n}\n_c = ValidateData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidateData\");","map":{"version":3,"sources":["/home/ire/Dev/frontend-engineer-interview/app/src/utils/validate.ts"],"names":["validator","ValidateData","data","rules","errors","Object","keys","forEach","field","hasOwnProperty","fielderrors","val","checked","push","required","isEmpty","strAlpha","matches","minlength","isLength","min","alphanumeric","isAlphanumeric","alpha","isAlpha","email","isEmail","password","isStrongPassword","equals","length"],"mappings":"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","sourcesContent":["import validator from \"validator\";\ntype rules = {\n  required: boolean;\n  minlength: number;\n  alpha: boolean;\n  email: boolean;\n  password: boolean;\n  checked: boolean;\n  equals: string;\n  strAlpha: boolean;\n  alphanumeric: boolean;\n};\n\nexport interface IRule {\n  [x: string]: Partial<rules>;\n}\nexport interface IData {\n  [x: string]: any;\n}\n\ninterface IErrors {\n  [field: string]: Array<string>;\n}\n\nexport function ValidateData(data: IData, rules: IRule) {\n  let errors: IErrors = {};\n  Object.keys(data).forEach((field) => {\n    if (rules.hasOwnProperty(field)) {\n      let fielderrors = [];\n      let val = data[field];\n      if (rules[field].checked) {\n        if (!val) {\n          fielderrors.push(\"Must be checked\");\n        }\n      } else {\n        if (rules[field].required && validator.isEmpty(val)) {\n          fielderrors.push(\"Value required\");\n        }\n        if (!validator.isEmpty(data[field])) {\n          if (\n            rules[field].strAlpha &&\n            !validator.matches(\n              val,\n              /^[a-z]([-']?[a-z]+)*( [a-z]([-']?[a-z]+)*)+$/gi\n            )\n          ) {\n            fielderrors.push(\"value must be a fullname eg 'John Doe'\");\n          }\n          if (\n            rules[field].minlength &&\n            !validator.isLength(val, { min: rules[field].minlength })\n          ) {\n            fielderrors.push(\n              `Enter at least ${rules[field].minlength}` + \" characters\"\n            );\n          }\n          if (rules[field].alphanumeric && !validator.isAlphanumeric(val)) {\n            fielderrors.push(\"field can only contain alphanumeric values\");\n          }\n          if (rules[field].alpha && !validator.isAlpha(val)) {\n            fielderrors.push(\"Enter only letters\");\n          }\n          if (rules[field].email && !validator.isEmail(val)) {\n            fielderrors.push(\"Enter a valid email address\");\n          }\n          if (rules[field].password && !validator.isStrongPassword(val)) {\n            fielderrors.push(\n              \"password must be 8 character long \\n must contain at least a special character,1 capital letter and a numeric value \"\n            );\n          }\n          if (\n            rules[field].equals &&\n            !validator.equals(val, data[rules[field].equals as keyof rules])\n          ) {\n            fielderrors.push(\"Values don't match\");\n          }\n        }\n      }\n      if (fielderrors.length > 0) {\n        errors[field] = fielderrors;\n      }\n    }\n  });\n  return errors;\n}\n"]},"metadata":{},"sourceType":"module"}